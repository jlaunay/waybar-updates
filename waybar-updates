#!/bin/bash

usage() {
  echo "Usage: waybar-updates [options]
    -i, --interval         Interval between checks
    -c, --cycles           Cycles between online checks (e.g. 6s * 600 cycles = 3600s = 1h between online checks)
    -l, --packages-limit   Maximum number of packages to be shown in notifications and tooltip
    -d, --devel            Enable check for development packages update
    -s, --second           Use it for a second instance
    -n, --news [(opt) all] Print new news from the Arch Linux homepage.
                           News is considered new if it is newer than the build date of all native packages.
                           Run with --news all to print all news regardless of the publication date."
  exit 2
}

interval=6
cycles_number=600
packages_limit=10
devel=false
news=false
allnews=false

PARSED_ARGUMENTS=$(getopt -o "hi:c:l:d::n::s::" --long "help,interval,cycles,packages-limit,devel::,news::,second::" --name "waybar-updates" -- "$@")
eval set -- "$PARSED_ARGUMENTS"
while :; do
  case "$1" in
  -i | --interval)
    interval="$2"
    shift 2
    ;;
  -c | --cycles)
    cycles_number="$2"
    shift 2
    ;;
  -l | --packages-limit)
    packages_limit="$2"
    shift 2
    ;;
  -d | --devel)
    devel=true
    shift 2
    ;;
  -s | --second)
    second=true
    shift 2
    ;;
  -n | --news)
    news=true
    shift 2
    if [ "$2" == "all" ]; then
      allnews=true
    fi
    ;;
  -h | --help) usage ;;
  --)
    shift
    break
    ;;
  *)
    echo "Unexpected option: $1"
    usage
    ;;
  esac
done

function check_pacman_updates() {
  if [ "$1" == "online" ]; then
    pacman_updates=$(checkupdates)
  elif [ "$1" == "offline" ]; then
    pacman_updates=$(checkupdates --nosync)
  fi

  pacman_updates_checksum=$(echo "$pacman_updates" | sha256sum)
  pacman_updates_count=$(echo "$pacman_updates" | grep -vc ^$)
}

function check_devel_updates() {
  ignored_packages=$(pacman-conf IgnorePkg)
  if [ "$1" == "online" ]; then
    develsuffixes="git"
    develpackages=$(pacman -Qm | grep -Ee "$develsuffixes")
    if [ -n "$ignored_packages" ]; then
        develpackages=$(grep -vF "$ignored_packages" <<< "$develpackages")
    fi
    rm -f "$tmp_devel_packages_file"
    tmp_devel_packages_file=$(mktemp --suffix -waybar-updates)
    build_devel_list "$develpackages" "online"
  elif [ "$1" == "offline" ]; then
    new_devel_packages=$(pacman -Qm | grep -Ee "$develsuffixes")
    old_devel_packages=$(awk '{printf ("%s %s\n", $1, $3)}' "$tmp_devel_packages_file")

    develpackages=$(LC_ALL=C join <(echo "$old_devel_packages") <(echo "$new_devel_packages"))

    if [[ $(echo "$develpackages" | grep -vc ^$) -ne 0 ]]; then
      develpackages=$(awk '{printf ("%s %s %s\n", $1, $3, $2)}' <<< "$develpackages")
      build_devel_list "$develpackages" "offline"
    fi
  fi
  devel_updates=$(awk '{printf ("%s %s\n", $1, $2)}' "$tmp_devel_packages_file")
  devel_updates_checksum=$(echo "$devel_updates" | sha256sum)
  devel_updates_count=$(echo "$devel_updates" | grep -vc ^$)
}

function build_devel_list() {
  custom_pkgbuild_vars="_gitname=\|_githubuser=\|_githubrepo=\|_gitcommit=\|url=\|_pkgname=\|_gitdir=\|_repo_name=\|_gitpkgname=\|source_dir=\|_name="

  truncate -s 0 "$tmp_devel_packages_file"

  i=0
  while read -r pkgname version source
  do
    (( i++ ))
    if [ -z "$source" ]; then
      PKGBUILD=$(curl -s "https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=$pkgname")
      eval "$(grep "$custom_pkgbuild_vars" <<< "$PKGBUILD")" 2>/dev/null
      eval source="$(grep -zPo '(?s)source=\(.*?\)' <<< "$PKGBUILD" | \
        awk '/git/{print "source="$1}' | \
        sed 's/source=//g' | sed '/http/p' | \
        sed 's/(//;s/)//g' | tr -d '\0' | head -1) 2>/dev/null"
      source=$(sed 's/^\(.*\)\(http.*$\)/\2/;s/\"//;s/'\''//' <<< "$source")
      source=$(cut -f1 -d"#" <<< "$source")
    fi
    lastcommit=$(git ls-remote --heads "$source" 2>/dev/null | awk '{ print $1}' | cut -c1-7)
    if ! echo "$version" | grep -q "$lastcommit"; then
      echo "$pkgname $version $source ${lastcommit//$'\n'/ }" >> "$tmp_devel_packages_file"
    fi
  done <<< "$1"
}

function check_aur_updates() {
  ignored_packages=$(pacman-conf IgnorePkg)
  if [ -n "$ignored_packages" ]; then
      old_aur_packages=$(pacman -Qm | grep -vF "$ignored_packages")
  else
      old_aur_packages=$(pacman -Qm)
  fi

  if [ "$1" == "online" ]; then
    rm -f "$tmp_aur_packages_file"
    tmp_aur_packages_file=$(mktemp --suffix -waybar-updates)
    # shellcheck disable=SC2046
    new_aur_packages=$(curl -s "https://aur.archlinux.org/rpc?v=5&type=info$(printf '&arg[]=%s' $(echo "$old_aur_packages" 2>/dev/null | cut -f1 -d' '))" |
      jq -r '.results[] | .Name + " " + .Version' | tee "$tmp_aur_packages_file")
  elif [ "$1" == "offline" ]; then
    new_aur_packages=$(cat "$tmp_aur_packages_file")
  fi

  aur_updates=$(LC_ALL=C join <(echo "$old_aur_packages") <(echo "$new_aur_packages") |
    while LC_ALL=C read -r pkg a b; do
      case "$(vercmp "$a" "$b")" in
      -1) printf "%s %s -> %s\n" "$pkg" "$a" "$b" ;;
      esac
    done)

  aur_updates_checksum=$(echo "$aur_updates" | sha256sum)
  aur_updates_count=$(echo "$aur_updates" | grep -vc ^$)
}

function check_news() {
  date_format=+$(locale -k LC_TIME | grep ^d_fmt | cut -d= -f2)

  aur=$(pacman -Qqm)
  native=$(pacman -Qneq)

  last_native_app_build_date=$(paclog --grep="upgraded " | grep -Ev "${aur//$'\n'/'|'}" |  grep -wE "${native//$'\n'/'|'}" | tail -1 | awk '{print $1}')
  # last_native_app_build_date="2023-11-01T21:25:21+0100" # Uncomment to try

  last_native_app_build_date=$(date --date "${last_native_app_build_date:1:-1}" +%s)

  feed=$(curl -s https://archlinux.org/feeds/news/ 2>/dev/null)

  read_feed() {
    local IFS='>'
    read -rd '<' TAG VALUE
  }

  rem_html() {
    echo "$1" | sed -e 's/&lt;/</g' \
      -e 's/&gt;/>/g' \
      -e 's/<[^>]*>//g' \
      -e 's/&amp;gt;/>/g;/&amp;lt;/g' \
      -e 's/&gt;/>/g;s/&lt;/</g'
  }

  while read_feed; do
    case $TAG in
    'item')
      title=''
      link=''
      pubDate=''
      description=''
      ;;
    'title')
      title=$(rem_html "$VALUE")
      ;;
    'link')
      link="$VALUE"
      ;;
    'pubDate')
      pubDate_s=$(date --date "$VALUE" +%s)
      pubDate=$(date --date "$VALUE" "$date_format")
      ;;
    'description')
      description=$(rem_html "$VALUE")
      ;;
    '/item')
      if { [ "$pubDate_s" -ge "$last_native_app_build_date" ] || [ $allnews == true ] ;}; then
        command=$(notify-send -a waybar-updates -u normal -i notification-new-symbolic \
          --action "readmore=Read online" \
          "$(printf '%s: %s' "${pubDate:1:-1}" "$title")" \
          "$description")
        if [[ "$command" == "readmore" ]]; then
          xdg-open "$link"
        fi
      fi
      ;;
    esac
  done <<<"$feed"
}

function check_updates() {
  if [ "$1" == "online" ]; then
    check_pacman_updates online
    check_aur_updates online
    if [ $devel == true ];then check_devel_updates online; fi
  elif [ "$1" == "offline" ]; then
    check_pacman_updates offline
    check_aur_updates offline
    if [ $devel == true ];then check_devel_updates offline; fi
  fi
  if [ $devel == true ];then
    total_updates_count=$((pacman_updates_count + aur_updates_count + devel_updates_count))
  else
    total_updates_count=$((pacman_updates_count + aur_updates_count))
  fi
}

function json() {
  jq --unbuffered --null-input --compact-output \
    --arg text "$1" \
    --arg alt "$2" \
    --arg tooltip "$3" \
    --arg class "$4" \
    '{"text": $text, "alt": $alt, "tooltip": $tooltip, "class": $class}'
}

function cleanup() {
  echo "Cleaning up..."
  rm -f "$tmp_aur_packages_file"
  rm -f "$tmp_devel_packages_file"
  rm -f "/tmp/waybJson"
  exit 0
}

function second_instance() {
  while true; do
      if [ -e "/tmp/waybJson" ]; then
          cat "/tmp/waybJson"
      fi

      sleep 1
  done
}

# sync at the first start
check_updates online
if [ $news == true ];then check_news; fi
pacman_updates_checksum=""
aur_updates_checksum=""
devel_updates_checksum=""
# count cycles to check updates using network sometime
cycle=0

trap cleanup SIGINT SIGTERM

# check updates every 6 seconds
while true; do
  if [ $second == true ];then second_instance; fi
  previous_pacman_updates_checksum=$pacman_updates_checksum
  previous_aur_updates_checksum=$aur_updates_checksum
  if [ $devel == true ];then previous_devel_updates_checksum=$devel_updates_checksum; fi

  if [ "$cycle" -ge "$cycles_number" ]; then
    check_updates online
    if [ $news == true ];then check_news; fi
    cycle=0
  else
    check_updates offline
    cycle=$((cycle + 1))
  fi
  if [ $devel == true ];then
    condition (){
      { [ "$previous_pacman_updates_checksum" == "$pacman_updates_checksum" ] &&
      [ "$previous_aur_updates_checksum" == "$aur_updates_checksum" ] &&
      [ "$previous_devel_updates_checksum" == "$devel_updates_checksum" ] ;}
    }
  else
    condition (){
      { [ "$previous_pacman_updates_checksum" == "$pacman_updates_checksum" ] &&
      [ "$previous_aur_updates_checksum" == "$aur_updates_checksum" ] ;}
    }
  fi
  if condition; then
    sleep "$interval"
    continue
  fi

  # send pushes, limit the body by 10 packages;
  # also create message that will be used as tooltip
  tooltip=""
  if [ "$pacman_updates_count" -gt 0 ]; then
    template=$(ngettext "waybar-updates" "%d update available from pacman" "%d updates available from pacman" "$pacman_updates_count")
    # shellcheck disable=SC2059
    [[ $second != true ]] && notify-send -a waybar-updates -u normal -i software-update-available-symbolic \
      "$(printf "$template" "$pacman_updates_count")" \
      "$(echo "$pacman_updates" | head -n "$packages_limit")"

    tooltip+="$pacman_updates"
  fi
  if [ "$aur_updates_count" -gt 0 ]; then
    template=$(ngettext "waybar-updates" "%d update available from AUR" "%d updates available from AUR" "$aur_updates_count")
    # shellcheck disable=SC2059
    [[ $second != true ]] && notify-send -a waybar-updates -u normal -i software-update-available-symbolic \
      "$(printf "$template" "$aur_updates_count")" \
      "$(echo "$aur_updates" | head -n "$packages_limit")"

    if [ -z "$tooltip" ]; then
      tooltip+="$aur_updates"
    else
      tooltip+="\n$aur_updates"
    fi
  fi
  if [ $devel == true ];then
    if [ "$devel_updates_count" -gt 0 ]; then
      template=$(ngettext "waybar-updates" "%d devel-update available from AUR" "%d devel-updates available from AUR" "$devel_updates_count")
      # shellcheck disable=SC2059
      [[ $second != true ]] && notify-send -a waybar-updates -u normal -i software-update-available-symbolic \
        "$(printf "$template" "$devel_updates_count")" \
        "$(echo "$devel_updates" | head -n "$packages_limit")"

      if [ -z "$tooltip" ]; then
        tooltip+="$devel_updates"
      else
        tooltip+="\n$devel_updates"
      fi
    fi
  fi
  if [ "$total_updates_count" -gt 0 ]; then
    json $total_updates_count "pending-updates" "$(echo -e "$tooltip" | head -n "$packages_limit")" "pending-updates" | tee /tmp/waybJson
  else
    json "" "updated" "$(gettext "waybar-updates" "System is up to date")" "updated" | tee /tmp/waybJson
  fi

  sleep "$interval"
done
